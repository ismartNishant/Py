{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 0 0]\n",
      " [0 0 0]\n",
      " [0 0 0]]\n",
      "Player 1 Turn\n",
      "Enter the row or col you want to place\n",
      "0 0\n",
      "[[1 0 0]\n",
      " [0 0 0]\n",
      " [0 0 0]]\n",
      "Player 2 Turn\n",
      "Enter the row or col you want to place\n",
      "1 0\n",
      "[[1 0 0]\n",
      " [2 0 0]\n",
      " [0 0 0]]\n",
      "Player 1 Turn\n",
      "Enter the row or col you want to place\n",
      "0 1\n",
      "[[1 1 0]\n",
      " [2 0 0]\n",
      " [0 0 0]]\n",
      "Player 2 Turn\n",
      "Enter the row or col you want to place\n",
      "1 2\n",
      "[[1 1 0]\n",
      " [2 0 2]\n",
      " [0 0 0]]\n",
      "Player 1 Turn\n",
      "Enter the row or col you want to place\n",
      "0 2\n",
      "[[1 1 1]\n",
      " [2 0 2]\n",
      " [0 0 0]]\n",
      "Player 2 Turn\n",
      "Enter the row or col you want to place\n"
     ]
    }
   ],
   "source": [
    "import numpy as NP\n",
    "\n",
    "def horizontal_check(Board):\n",
    "    for i in range (len(Board)):\n",
    "        li = []\n",
    "        for j in range (len(Board)):\n",
    "            li.append(Board[i][j])\n",
    "        li_set = set(li)\n",
    "        x = li_set.pop()\n",
    "        if len(set(li)) == 0 and x!=0:\n",
    "            return True\n",
    "    return False\n",
    "\n",
    "def vertical_check(Board):\n",
    "    for i in range (len(Board)):\n",
    "        li = []\n",
    "        for j in  range (len(Board)):\n",
    "            li.append(Board[j][i])\n",
    "        li_set = set(li)\n",
    "        x = li_set.pop()\n",
    "        if len(set(li)) == 0 and x!=0:\n",
    "            return True\n",
    "    return False\n",
    "\n",
    "def diagonal_check(Board):\n",
    "    diagonal1 = [Board[0,0],Board[1,1],Board[2,2]]\n",
    "    diagonal2 = [Board[2,0],Board[1,1],Board[0,2]]\n",
    "    \n",
    "    diagonal1_set = set(diagonal1)\n",
    "    diagonal2_set = set(diagonal2)\n",
    "    x1 = diagonal1_set.pop()\n",
    "    x2 = diagonal2_set.pop()\n",
    "    if (len(diagonal1_set) == 0 and x1!=0) or (len(diagonal2_set) == 0 and x2!=0):\n",
    "        return True\n",
    "    else:\n",
    "         False\n",
    "            \n",
    "def check_win(Board):\n",
    "    return( vertical_check(Board) or horizontal_check(Board) or diagonal_check(Board) )\n",
    "\n",
    "\n",
    "def player1_turn(Board):\n",
    "    try_again = True\n",
    "    print(\"Player 1 Turn\")\n",
    "    while try_again == True:\n",
    "        print(\"Enter the row or col you want to place\")\n",
    "        li = [ int(i) for i in input().strip().split()]\n",
    "        if Board[li[0] , li[1]] == 0:\n",
    "            Board[li[0], li[1]] = 1\n",
    "            try_again = False\n",
    "        else:\n",
    "            print(\"This palce is slready filled\")\n",
    "    print(Board)\n",
    "    \n",
    "def player2_turn(Board):\n",
    "    try_again = True\n",
    "    print(\"Player 2 Turn\")\n",
    "    while try_again == True:\n",
    "        print(\"Enter the row or col you want to place\")\n",
    "        li =[int(i) for i in input().strip().split()]\n",
    "        if Board[li[0], li[1]] == 0:\n",
    "            Board[li[0], li[1]] = 2\n",
    "            try_again = False\n",
    "        else:\n",
    "            print(\"This place is already filled\")\n",
    "    print(Board)\n",
    "    \n",
    "def play_Game():\n",
    "    Board = NP.zeros((3,3), dtype = \"int32\")\n",
    "    print(Board)\n",
    "    \n",
    "    player1_turn(Board)\n",
    "    player2_turn(Board)\n",
    "    \n",
    "    while True:\n",
    "        player1_turn(Board)\n",
    "        if check_win(Board) == True:\n",
    "            print(\"Player1 win Hurray!!\")\n",
    "            break\n",
    "        player2_turn(Board)\n",
    "        if check_win(Board) == True:\n",
    "            print(\"Player2 win Hurray!!\")\n",
    "            break\n",
    "        \n",
    "\n",
    "play_Game()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
